#  __slots__是什么：是一个类变量，变量值可以是
# 列表，元组，或者可迭代对象，也可以是一个字符串（意味着所有实列只有一个数据属性）
#1.__slots__是什么:是一个类变量,变量值可以是列表,元祖,或者可迭代对象,也可以是一个字符串(意味着所有实例只有一个数据属性)
# 2.引子:使用点来访问属性本质就是在访问类或者对象的__dict__属性字典(类的字典是共享的,而每个实例的是独立的)
# 3.为何使用__slots__:字典会占用大量内存,如果你有一个属性很少的类,但是有很多实例,为了节省内存可以使用__slots__取代实例的__dict__
# 当你定义__slots__后,__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的数组来构建,而不是为每个实例定义一个
# 字典,这跟元组或列表很类似。在__slots__中列出的属性名在内部被映射到这个数组的指定小标上。使用__slots__一个不好的地方就是我们不能再给
# 实例添加新的属性了,只能使用在__slots__中定义的那些属性名。
# 4.注意事项:__slots__的很多特性都依赖于普通的基于字典的实现。另外,定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该
# 只在那些经常被使用到 的用作数据结构的类上定义__slots__比如在程序中需要创建某个类的几百万个实例对象 。
# 关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。
#   更多的是用来作为一个内存优化工具。
class Foo:
    __slots__ = 'name'#有几个属性 就只能实列化几个属性 可以用列表的方式 定义多个属性
f1=Foo()
f1.name='pl'
print(f1)
# f1.age=18
# print(f1) # ——>f1.__dict__['age']=18  没有__dict__  取而代之是__slots__
#相当于类的

####                 doc 属性  父类无法继承给子类
class Foo:
    pass
class Bar(Foo):
    pass
print(Foo.__dict__)
print(Bar.__dict__)
print(Bar.__doc__)#该属性无法继承给子类
#isinstance(obj,cls)和issubclass(sub,supper 前面一个类是否是第二个子类)
# 第一个判断对象是否是这个对象里面的