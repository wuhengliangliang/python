#描述符是很多高级库，和框架的重要工具之一，描述符通常是使用到装饰器或者元类的大型框架中的一个组件
#描述符分为两种：
#第一种是数据描述符：至少实现了 __get__()和__set__()
#第二种为非数据描述符：没有实现__set__()
#http://www.cnblogs.com/linhaifeng/articles/6204014.html#_label6
#描述符是什么：描述符本质是一个新式类，
# 这个新式类至少实现了__getter__()__set__()__delete__()中的一个，这也被称为描述符
#描述符是干什么的：描述符的作用是用来代理另外一个类的类属性的
# （必须把描述符定义成这个类的类属性，不能定义到构造函数中）
#__get__():调用一个属性时,触发
#__set__():为一个属性赋值时,触发
#__delete__():采用del删除属性时,触发
#直接用描述符本身的对象是没有调用的效果的
class Foo:
    def __get__(self, instance, owner):#取值触发
        print("get")
    def __set__(self, instance, value):#赋值触发
        print("set",instance,value)
        # instance.__dict__["x"]=value #如果进行这步操作 就会在b1中的字典传入值
    def __delete__(self, instance):#删除触发
        print("delete")
f1=Foo()
f1.name='pl'   #调用时候没有触发set 函数  自己用时候不可能执行 必须有另外一个类
print(f1.name)
class Bar:
    x=Foo()  #x被Foo描述 也就是被Foo 所代理了 #在何时 #  定义的是一个类属性 这个属性是Foo 实例化的结果
    def __init__(self,n):
        self.x=n #就类似b1.x=10 #因为有了x=Foo这个属性调用了描述符 所以 触发 如果没有Foo 便会打印自己的
b1=Bar(10)#加入没有Foo找的是自己的属性字典
print(b1.__dict__)
#如果没有被代理的属性 就是自己的
b1.y=1111111111111
print(b1.__dict__)
#自己的字典当中在没有调用描述符时候 便会在自己的函数中执行
#在何地
# f2=Bar()
# f2.x  #调用Foo的实例 一个描述符的对象
# del f2.x   #调用了描述符里的内容
# # print(f2.x)
           #4 注意事项:
# 一 描述符本身应该定义成新式类,被代理的类也应该是新式类
# 二 必须把描述符定义成这个类的类属性，不能为定义到构造函数中
# 三 要严格遵循该优先级,优先级由高到底分别是
# 1.类属性
# 2.数据描述符
# 3.实例属性
# 4.非数据描述符
# 5.找不到的属性触发__getattr__()